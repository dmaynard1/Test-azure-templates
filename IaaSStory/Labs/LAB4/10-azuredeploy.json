{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vnetName": {
      "type": "string",
      "defaultValue": "WTestVNet",
      "metadata": {
        "description": "Name for the new VNet."
      }
    },
    "vnetPrefix": {
      "type": "string",
      "defaultValue": "192.168.0.0/16",
      "metadata": {
        "description": "CIDR prefix for the VNet address space."
      }
    },
    "frontEndSubnetName": {
      "type": "string",
      "defaultValue": "FrontEnd",
      "metadata": {
        "description": "Name for the front end subnet."
      }
    },
    "frontEndSubnetPrefix": {
      "type": "string",
      "defaultValue": "192.168.1.0/24",
      "metadata": {
        "description": "CIDR address prefix for the front end subnet."
      }
    },
    "backEndSubnetName": {
      "type": "string",
      "defaultValue": "BackEnd",
      "metadata": {
        "description": "Name for the back end subnet."
      }
    },
    "backEndSubnetPrefix": {
      "type": "string",
      "defaultValue": "192.168.2.0/24",
      "metadata": {
        "description": "CIDR address prefix for the back end subnet."
      }
    },
    "frontEndNSGName": {
      "type": "string",
      "defaultValue": "NSG-FrontEnd",
      "metadata": {
        "description": "Name for the NSG used to allow RDP, HTTP and HTPPS."
      }
    },
    "backEndNSGName": {
      "type": "string",
      "defaultValue": "NSG-BackEnd",
      "metadata": {
        "description": "Name for the NSG used to allow remote access, DB access, and block Internet."
      }
    },
    "stdStorageName": {
      "type": "string",
      "defaultValue": "wtestvnetstoragestd",
      "metadata": {
        "description": "Name for standard storage account."
      }
    },
    "stdStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage type."
      }
    },
    "prmStorageName": {
      "type": "string",
      "defaultValue": "wtestvnetstorageprm",
      "metadata": {
        "description": "Name for simple storage account."
      }
    },
    "prmStorageType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_GRS",
        "Premium_ZRS"
      ]
    },
    "osType": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1
      ],
      "metadata": {
        "description": "Type of OS to use for VMs: 0 - Windows; 1 - Ubuntu."
      }
    },
    "webCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VMs to be deployed to the front end subnet."
      }
    },
    "dbCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of database VMs to be deployed to the backend end subnet."
      }
    },
    "dnsNameforLBIP": {
      "type": "string",
      "defaultValue": "iaasstory",
      "metadata": {
        "description": "Unique DNS name for LB VIP."
      }
    },
    "lbName": {
      "type": "string",
      "defaultValue": "WWEBLB",
      "metadata": {
        "description": "Name for public facing load balancer."
      }
    },
    "lbPIPName": {
      "type": "string",
      "defaultValue": "PIPLB",
      "metadata": {
        "description": "Name for load balancer PIP."
      }
    }
  },
  "variables": {
    "webVMSettings": [
      {
        "vmSize": "Standard_A1",
        "adminUsername": "adminuser",
        "adminPassword": "adminP@ssw0rd",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "version": "latest",
        "vmName": "WEB",
        "osdisk": "osdiskweb",
        "nicName": "NICWEB",
        "pipName": "PIPWEB",
        "ipAddress": "192.168.1.",
        "extensionDeployment": "https://raw.githubusercontent.com/telmosampaio/azure-templates/master/IaaSStory/IaaSStory/Templates/04-Custom%20extension/iisaspnet.json",
        "avsetName": "ASWEB",
        "remotePort": 3389
      },
      {
        "vmSize": "Standard_A1",
        "adminUsername": "adminuser",
        "adminPassword": "adminP@ssw0rd",
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.2-LTS",
        "version": "latest",
        "vmName": "WEB",
        "osdisk": "osdiskweb",
        "nicName": "NICWEB",
        "pipName": "PIPWEB",
        "ipAddress": "192.168.1.",
        "extensionDeployment": "https://raw.githubusercontent.com/telmosampaio/azure-templates/master/IaaSStory/IaaSStory/Templates/04-Custom%20extension/apache.json",
        "avsetName": "ASWEB",
        "remotePort": 22
      }
    ],
    "dbVMSettings": [
      {
        "vmSize": "Standard_DS1",
        "adminUsername": "adminuser",
        "adminPassword": "adminP@ssw0rd",
        "publisher": "MicrosoftSQLServer",
        "offer": "SQL2014SP1-WS2012R2",
        "sku": "Standard",
        "version": "latest",
        "vmName": "DB",
        "osdisk": "osdiskdb",
        "datadisk": "datadiskdb",
        "nicName": "NICDB",
        "pipName": "PIPDB",
        "ipAddress": "192.168.2.",
        "extensionDeployment": "",
        "avsetName": "ASDB",
        "remotePort": 3389,
        "dbPort": 1433
      },
      {
        "vmSize": "Standard_DS1",
        "adminUsername": "adminuser",
        "adminPassword": "adminP@ssw0rd",
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.2-LTS",
        "version": "latest",
        "vmName": "DB",
        "osdisk": "osdiskdb",
        "datadisk": "datadiskdb",
        "nicName": "NICDB",
        "pipName": "PIPDB",
        "ipAddress": "192.168.2.",
        "extensionDeployment": "",
        "avsetName": "ASDB",
        "remotePort": 22,
        "dbPort": 1433
      }
    ],
    "location": "[resourceGroup().location]",
    "vmStorageAccountContainerName": "vhds",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "frontEndSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('frontEndSubnetName'))]",
    "backEndSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('backEndSubnetName'))]",
    "webVMSetting": "[variables('webVMSettings')[parameters('osType')]]",
    "dbVMSetting": "[variables('dbVMSettings')[parameters('osType')]]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/loadBalancerBackend')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]"
  },
  "resources": [
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('stdStorageName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "Storage Account - Simple"
      },
      "properties": {
        "accountType": "[parameters('stdStorageType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('prmStorageName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "Storage Account - Premium"
      },
      "properties": {
        "accountType": "[parameters('prmStorageType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[parameters('backEndNSGName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NSG - Back End"
      },
      "properties": {
        "securityRules": [
          {
            "name": "allow-frontend",
            "properties": {
              "description": "Allow FE Subnet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('dbVMSetting').dbPort]",
              "sourceAddressPrefix": "[parameters('frontEndSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-remote-access",
            "properties": {
              "description": "Allow remote access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('dbVMSetting').remotePort]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "block-internet",
            "properties": {
              "description": "Block Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Deny",
              "priority": 100,
              "direction": "Outbound"
            }
          }

        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[parameters('frontEndNSGName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NSG - Front End"
      },
      "properties": {
        "securityRules": [
          {
            "name": "allow-remote-access",
            "properties": {
              "description": "Allow remote access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('webVMSetting').remotePort]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-http",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-https",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('vnetName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('frontEndNSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('backEndNSGName'))]"
      ],
      "tags": {
        "displayName": "VNet"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('frontEndSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('frontEndSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('frontEndNSGName'))]"
              }
            }
          },
          {
            "name": "[parameters('backEndSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('backEndSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('backEndNSGName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('lbPIPName')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "displayName": "PublicIPAddress - LB"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('dbVMSetting').pipName, copyindex(1))]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "displayName": "PublicIPAddresses - DB"
      },
      "copy": {
        "name": "dbpipcount",
        "count": "[parameters('dbCount')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('webVMSetting').nicName, copyindex(1))]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkInterfaces - Web"
      },
      "copy": {
        "name": "webniccount",
        "count": "[parameters('webCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]",
        "[concat('Microsoft.Network/loadBalancers/',parameters('lbName'),'/inboundNatRules/', 'RDP-', variables('webVMSetting').vmName, copyIndex(1))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('webVMSetting').ipAddress,copyindex(4))]",
              "subnet": {
                "id": "[variables('frontEndSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [                
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend/inboundNatRules/', 'RDP-', variables('webVMSetting').vmName, copyIndex(1))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('dbVMSetting').nicName, copyindex(1))]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkInterfaces - DB"
      },
      "copy": {
        "name": "dbniccount",
        "count": "[parameters('dbCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('dbVMSetting').pipName, copyindex(1))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('dbVMSetting').ipAddress,copyindex(4))]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('dbVMSetting').pipName, copyindex(1)))]"
              },
              "subnet": {
                "id": "[variables('backEndSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('webVMSetting').avsetName]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "AvailabilitySet - Web"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('dbVMSetting').avsetName]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "AvailabilitySet - DB"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('webVMSetting').vmName,copyindex(1))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('webVMSetting').nicName, copyindex(1))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('webVMSetting').avsetName)]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('stdStorageName'))]"
      ],
      "tags": {
        "displayName": "VMs - Web"
      },
      "copy": {
        "name": "webvmcount",
        "count": "[parameters('webCount')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('webVMSetting').avsetName)]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('webVMSetting').vmSize]"
        },
        "osProfile": {
          "computerName": "[concat(variables('webVMSetting').vmName,copyindex(1))]",
          "adminUsername": "[variables('webVMSetting').adminUsername]",
          "adminPassword": "[variables('webVMSetting').adminPassword]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('webVMSetting').publisher]",
            "offer": "[variables('webVMSetting').offer]",
            "sku": "[variables('webVMSetting').sku]",
            "version": "[variables('webVMSetting').version]"
          },
          "osDisk": {
            "name": "[concat(variables('webVMSetting').osdisk,copyindex(1))]",
            "vhd": {
              "uri": "[concat('http://', parameters('stdStorageName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('webVMSetting').osdisk, copyindex(1),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('webVMSetting').nicName,copyindex(1)))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('dbVMSetting').vmName,copyindex(1))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('dbVMSetting').nicName, copyindex(1))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('dbVMSetting').avsetName)]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('stdStorageName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('prmStorageName'))]"
      ],
      "tags": {
        "displayName": "VMs - DB"
      },
      "copy": {
        "name": "dbvmcount",
        "count": "[parameters('dbCount')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('dbVMSetting').avsetName)]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('dbVMSetting').vmSize]"
        },
        "osProfile": {
          "computerName": "[concat(variables('dbVMSetting').vmName,copyindex(1))]",
          "adminUsername": "[variables('dbVMSetting').adminUsername]",
          "adminPassword": "[variables('dbVMSetting').adminPassword]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('dbVMSetting').publisher]",
            "offer": "[variables('dbVMSetting').offer]",
            "sku": "[variables('dbVMSetting').sku]",
            "version": "[variables('dbVMSetting').version]"
          },
          "osDisk": {
            "name": "[concat(variables('dbVMSetting').osdisk,copyindex(1))]",
            "vhd": {
              "uri": "[concat('http://', parameters('stdStorageName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('dbVMSetting').osdisk, copyindex(1),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://', parameters('prmStorageName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('dbVMSetting').datadisk, copyindex(1),'-1','.vhd')]"
              },
              "name": "[concat(variables('dbVMSetting').datadisk,copyindex(1),'-data-disk1')]",
              "diskSizeGB": "127",
              "createOption": "Empty",
              "lun": 0
            },
            {
              "vhd": {
                "uri": "[concat('http://', parameters('prmStorageName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('dbVMSetting').datadisk, copyindex(1),'-2','.vhd')]"
              },
              "name": "[concat(variables('dbVMSetting').datadisk,copyindex(1),'-data-disk2')]",
              "diskSizeGB": "127",
              "createOption": "Empty",
              "lun": 1
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('dbVMSetting').nicName,copyindex(1)))]"
            }
          ]
        }
      }
    },
    //{
    //  "apiVersion": "2015-01-01",
    //  "type": "Microsoft.Resources/deployments",
    //  "name": "[concat('webserver', copyindex(1))]",
    //  "copy": {
    //    "name": "webvmcount",
    //    "count": "[parameters('webCount')]"
    //  },
    //  "dependsOn": [
    //    "[concat('Microsoft.Compute/virtualMachines/', variables('webVMSetting').vmName, copyindex(1))]"
    //  ],
    //  "properties": {
    //    "mode": "Incremental",
    //    "templateLink": {
    //      "uri": "[variables('webVMSetting').extensionDeployment]",
    //      "contentVersion": "1.0.0.0"
    //    },
    //    "parameters": {
    //      "vmName": { "value": "[concat(variables('webVMSetting').vmName],copyindex(1))" }
    //    }
    //  }
    //},
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[parameters('lbName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('lbPIPName'))]"
      ],
      "tags": {
        "displayName": "LB - Public"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('lbPIPName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule-80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": { "id": "[variables('lbPoolID')]" },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": { "id": "[variables('lbProbeID')]" }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": "[parameters('webCount')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(parameters('lbName'), '/', 'RDP-', variables('webVMSetting').vmName, copyIndex(1))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]"
      ],
      "tags": {
        "displayName": "LB - NAT Rules"
      },
      "copy": {
        "name": "lbLoopNode",
        "count": "[parameters('webCount')]"
      },
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[add(50000,copyIndex(1))]",
        "backendPort": "[variables('webVMSetting').remotePort]",
        "enableFloatingIP": false
      }
    }
  ]
}